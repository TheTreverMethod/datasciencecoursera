a <- available.packages()
head(rownames(a), 3)
setwd("~/")
find.package("devtools")
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
find.package("KernSmooth")
library(KernSmooth)
Sys.getenv("R_USER")
Sys.getenv("HOME")
Sys.setenv(HOME="C:/Users/Trever")
Sys.getenv("HOME")
Sys.getenv("HOME")
Sys.getenv("HOME")
getwd()
dir()
setwd("C:/Users/Trever/SourceCode/datasciencecoursera")
Sys.setenv(HOME="C:/Users/Trever")
Sys.getenv("HOME")
install.packages('RMySQL')
R.home()
install.packages('RMySQL',type='source')
Sys.getenv('MYSQL_HOME')
ucscDb <- dbConnect(MySQL(), user='genome', host='genome-mysql.cse.ucsc.edu')
library(RMySQL)
ucscDb <- dbConnect(MySQL(), user='genome', host='genome-mysql.cse.ucsc.edu')
result <- dbGetQuery(ucscDb, 'show databases;'); dbDisconnect(ucscDb);
result
hg19 <- dbConnect(MySQL(), user='genome', db='')
hg19 <- dbConnect(MySQL(), user='genome', db='hg19',
host='genome-mysql.cse.ucsc.edu')
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19, 'affyU133Plus2')
dbGetQuery(hg19, 'select count(*) from affyU133Plus2')
affyData <- dbReadTable(hg19, 'affyU133Plus2')
head(affyData)
dbDisconnect(hg19)
source('http://bioconductor.org/bioclite.R')
source('http://bioconductor.org/biocLite.R')
biocLite('rhdf5')
library(rhdf5)
created = h5createFile('example.h5')
created
created = h5createGroup('example.h5', 'foo')
created = h5createGroup('example.h5', 'baa')
created = h5createGroup('example.h5', 'foo/foobaa')
h5ls('example.h5')
A = matrix(1:10,nr=5,nc=2)
h5write(A, 'example.h5','foo/A')
B = array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))
B
seq(0.1,2.0,by=0.1)
attr(B, 'scale') <- 'liter'
h5write(B, 'example.h5','foo/foobaa/B')
h5ls('example.h5')
1L
5L
class(1)
class(1L)
1
readA = h5read('example.h5','foo/A')
readA
install.packages(httr)
install.packages('httr')
oauth_endpoints("github")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "1291ba8866bd6a40d3dc",
secret = "bbbb61c87d0a5c529c305fb252ef2777d5549489")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
\
gtoken <- config(token = github_token)
req <- GET('https://api.github.com/users/jtleek/repos', gtoken)
stop_for_status(req)
content(req)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET('https://api.github.com/users/jtleek/repos', gtoken)
stop_for_status(req)
acs <- read.csv('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv')
install.packages('sqldf')
sqldf("select * from acs where AGEP < 50 and pwgtp1")
library(sqldf)
sqldf("select * from acs where AGEP < 50 and pwgtp1")
head(acs)
sqldf("select * from acs where AGEP < 50 and pwgtp1")
sqldf("select * from acs where AGEP < 50 and pwgtp1")
detach('package:RMySQL', unload=T)
sqldf("select * from acs where AGEP < 50 and pwgtp1")
sqldf("select pwgtp1 from acs where AGEP < 50")
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
?readlines
?readLines
html = readLines(con, 100)
html
?nchar
nchar('how long am i')
nchar('how long am')
html[10]
nchar(html[10])
nchar(html[20])
nchar(html[30])
nchar(html[100])
x <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
x
x[[4]]
?sum
sum(x[[4]])
x <- read.fwf(
file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip=4,
widths=c(12, 7, 4, 9, 4, 9, 4, 9, 4))
sum(x[[4]])
?rm
rm(list = ls())
var <- "hey there"
mtcars
library(reshape2)
install.packages('reshape2')
mtcars$carname <- rownames(mtcars)
carMelt <- melt(mtcars, id=c('carname','gear','cyl'), measure.vars=c('mpg','hp'))
library(reshape2)
carMelt <- melt(mtcars, id=c('carname','gear','cyl'), measure.vars=c('mpg','hp'))
carMelt
mtcars
head(carMelt, n=3)
tail(carMelt, n=3)
cylData <- dcast(carMelt, cyl ~ variable)
cyl ~ variable
cylData
carMelt
cylData <- dcast(carMelt, cyl ~ variable, mean)
cylData
InsectSprays
tapply(InsectSprays$count, InsectSprays$spray, sum)
tapply(InsectSprays$count, InsectSprays$spray, mean)
spIns = split(InsectSprays$count, InsectSprays$spray)
spIns
sprCount = lapply(spIns, sum)
sprCount
tapply(InsectSprays$count, InsectSprays$spray, sum)
unlist(sprCount)
ddply(InsectSprays, .(spray), summarize, sum=sum(count))
install.packages('plyr')
install.packages("plyr")
library(swirl)
swirl()
last()
help()
cran
play()
names(cran)
unique(cran$country)
filter(cran, r_version <= "3.0.2", country == "IN")
swirl()
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
play()
class(cran)
nxt()
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
gather(students2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
?gather
students2
?separate
submit()
students3
?gather
submit()
submit()
?spread
submit()
submit()
submit()
submit()
submit()
library(readr)
parse_number('class5')
?mutate
submit()
students4
?select
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = TRUE)
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
?bind_rows
bind_rows(passed, failed, id = name)
bind_rows(passed, failed, id = "name")
bind_rows(passed, failed)
sat
names(sat)
?gather
?separate
submit()
submit()
