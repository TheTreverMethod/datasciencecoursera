getwd()
ls()
dir()
setwd('Code')
dir()
setwd('coursera-data-science-temp')
dir()
dir()
setwd('..')
dir()
setwd('datasciencecoursera/R Programming')
dir()
setwd('Weeb 2')
setwd('Week 2')
dir()
dir('specdata')
corr <- c()
corr
setwd('specdata')
df <- read.csv('001.csv')
df[[1]]
colnames(df)
df
ls
ls()
df[1,]
df[,1]
as.vector(df[1,])
is.na(df[1,])
any(is.na(df[1,]))
is.na(df)
df[1:2,]
complete.cases(df)
df[complete.cases(df),]
length(df[complete.cases(df),])
nrow(df[complete.cases(df),])
which(complete.cases(df))
length(which(complete.cases(df)))
nrow(df[complete.cases(df),])
?cor
complete_cases <- df[complete.cases(df),]
complete_cases
cor(complete_cases[,'sulfate'], complete_cases[,'nitrate'])
cor(complete_cases[,'nitrate'], complete_cases[,'sulfate'])
dir()
setwd('..')
dir()
source('corr.R')
print(R.version.string)
source('corr.R')
cr <- corr('specdata', 150)
dir()
files <- dir('specdata')
df <- read.csv(files[1])
files[1]
source('corr.R')
cr <- corr('specdata', 150)
df
complete_cases <- df[complete.cases(df),]
complete_cases
nrow(complete_cases)
cor <- cor(complete_cases[,'sulftate'], complete_cases[,'nitrate'])
complete_cases[,'sulfate']
complete_cases[,'nitrate']
cor(complete_cases[,'sulftate'], complete_cases[,'nitrate'])
length(complete_cases[,'nitrate'])
length(complete_cases[,'sulfate'])
cor(complete_cases[,"nitrate"], complete_cases[,"nitrate"])
cor(complete_cases[,"sulfate"], complete_cases[,"nitrate"])
cor <- cor(complete_cases[,'sulfate'], complete_cases[,'nitrate'])
cor
r <- corr('specdata', 150)
source('corr.R')
cr <- corr('specdata', 150)
cr
head(cr)
summary(cr)
cr <- corr('specdata', 5000)
cr
summary(cr)
length(cr)
cr <- corr('specdata')
summary(cr)
length(cr)
source('pollutantmean.R')
library('stringr')
strinr
stringr
source('pollutantmean.R')
source('complete.R')
source('corr.R')
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
gl(3,10)
gl(4,10)
gl(1,3)
?gl
gl(1,3,length = 4)
gl(2,3,length = 4)
swirl()
install.packages(swirl)
install.packages('swirl')
library(swirl)
rm(list=ls())
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lappy(flags, class)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:27]
flag_colors <- flags[,11:17]
head(flag_colors)
play()
flag_colors
cls_list
flags
ncol(flags)
nrow(flags)
flags
swirl()
swirl()
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
?lapply
v <- c(1,2,3)
square <- function(x) {}
square <- function(x) { x * x }
square(3)
lapply(v, square)
lapply(v, square)[[1]]
sapply(v, square)
gl(1,3)
gl(2,3)
?gl
gl(2,3, length = 4)
swirl()
play()
flags
colnames(flags)
str(flags)
?str
nrow(flags)
ncol(flags)
head(flags)
summary(flags)
ls()
v
my_list <- c('a', 1, TRUE)
class(my_list)
my_list
my_list <- list('a', 1, TRUE)
my_list
class(my_list)
rownames(my_list)
colnames(my_list)
colnames(my_list) <- c('character', 'numeric', 'logical')
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags?landmass)
table(flags$landmass)
play()
flags[,'landmass']
flags
unique(flags[,'landmass'])
flags$landmass
flags[,'landmass']
?table
table(flags$landmass)
table(flags[,'landmass'])
swirl()
table(flags$animate)
?tapply
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
class(iris)
head(iris)
tapply(iris$Sepal.Length, iris$Species, summary)
?apply
iris[,1:4]
rowmeans(iris[,1:4])
rowMeans(iris[,1:4])
colMeans(iris)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
colnames(mtcars)
split(mtcars, mtcars$cyl)
head(mtcars)
ncol(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
lapply(mtcars, mean)
mean(mtcars$mpg, mtcars$cyl)
?mean
?sapply
split(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
?mtcars
tapply(mtcars$hp, mtcars$cyl, mean)
hpByCyl <- tapply(mtcars$hp, mtcars$cyl, mean)
hpByCyl
hpByCyl[[4]]
hpByCyl[[1]]
hpByCyl[[3]] - hpByCyl[[1]]
debug(ls)
ls
ls()
function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE,
pattern, sorted = TRUE)
function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE,
pattern, sorted = TRUE)
function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE,
pattern, sorted = TRUE)
{
if (!missing(name)) {
pos <- tryCatch(name, error = function(e) e)
if (inherits(pos, "error")) {
name <- substitute(name)
if (!is.character(name))
name <- deparse(name)
warning(gettextf("%s converted to character string",
sQuote(name)), domain = NA)
pos <- name
}
}
all.names <- .Internal(ls(envir, all.names, sorted))
if (!missing(pattern)) {
if ((ll <- length(grep("[", pattern, fixed = TRUE))) &&
ll != length(grep("]", pattern, fixed = TRUE))) {
if (pattern == "[") {
pattern <- "\\["
warning("replaced regular expression pattern '[' by  '\\\\['")
}
else if (length(grep("[^\\\\]\\[<-", pattern))) {
pattern <- sub("\\[<-", "\\\\\\[<-", pattern)
warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
}
}
grep(pattern, all.names, value = TRUE)
}
else all.names
}
exit
function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE,
pattern, sorted = TRUE)
{
if (!missing(name)) {
pos <- tryCatch(name, error = function(e) e)
if (inherits(pos, "error")) {
name <- substitute(name)
if (!is.character(name))
name <- deparse(name)
warning(gettextf("%s converted to character string",
sQuote(name)), domain = NA)
pos <- name
}
}
all.names <- .Internal(ls(envir, all.names, sorted))
if (!missing(pattern)) {
if ((ll <- length(grep("[", pattern, fixed = TRUE))) &&
ll != length(grep("]", pattern, fixed = TRUE))) {
if (pattern == "[") {
pattern <- "\\["
warning("replaced regular expression pattern '[' by  '\\\\['")
}
else if (length(grep("[^\\\\]\\[<-", pattern))) {
pattern <- sub("\\[<-", "\\\\\\[<-", pattern)
warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
}
}
grep(pattern, all.names, value = TRUE)
}
else all.names
}
c
